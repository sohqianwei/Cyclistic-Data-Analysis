install.packages("tidyverse")
library(tidyverse)
library(lubridate)
library(lubridate)
xy
x y
data.frame(x = c(1, 2, 3), y = c(1.5, 5.5, 7.5))
dir.create("destination_folder")
file.create("new_text_file.txt")
file.copy("new_text_file.txt", "destination_folder")
unlink("new_text_file.txt")
midyear_sales <- quarter_1_sales + quarter_2_sales
# our first calculations
quarter_1_sales <- 35657.98
# our first calculations
quarter_1_sales <- 35657.98
quarter_2_sales <- 43810.55
midyear_sales <- quarter_1_sales + quarter_2_sales
midyear_sales
yearend_sales <- midyear_sales * 2
yearend_sales
TRUE & TRUE
TRUE & FALSE
FALSE & TRUE
FALSE & FALSE
x <- 10
x > 3 & x < 12
TRUE | TRUE
TRUE | FALSE
FALSE | TRUE
FALSE | FALSE
y <- 12
y < 8 | y > 16
!TRUE
!FALSE
Solar.R > 150 | Wind > 10
if (x < 0) {
print("x is a negative number")
} else if (x == 0) {
print ("x is zero")
} else {
print("x is a positive number")
}
if (x < 0) {
print("x is a negative number")
} else if (x == 0) {
print ("x is zero")
} else {
print("x is a positive number")
}
x <- -1
if (x < 0) {
print("x is a negative number")
} else if (x == 0) {
print ("x is zero")
} else {
print("x is a positive number")
}
x <- 1
if (x < 0) {
print("x is a negative number")
} else if (x == 0) {
print ("x is zero")
} else {
print("x is a positive number")
}
datacamp_views <- c(100,20,5,200,60,88,190,33,290,64)
youtube_views <- c(10,20,1000,64,100,9,19,3,90,4)
views <- matrix(c(datacamp_views, youtube_views), nrow = 2, byrow = TRUE)
views
install.packages("tidyverse")
head(diamonds)
install.packages("tidyverse")
head(diamonds)
library("tidyverse")
head(diamonds)
str(diamonds)
str(diamonds)
colnames(diamonds)
rename(diamonds, carat_new = carat)
summarize(diamonds, mean_carat = mean(carat))
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price), color = cut) +
+     geom_point()
ggplot(data = diamonds, aes(x = carat, y = price), color = cut) +
+     geom_point()
ggplot(data = diamonds, aes(x = carat, y = price), color = cut)  +     geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
facet_wrap(~cut)
installed.packages()
browseVignettes(“ggplot2”)
browseVignettes(“ggplot2”)
library(tidyverse)
browseVignettes(“ggplot2”)
browseVignettes(ggplot2)
library(ggplot2)
browseVignettes(ggplot2)
library("ggplot2")
browseVignettes(ggplot2)
browseVignettes("ggplot2")
data("ToothGrowth")
View(ToothGrowth)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
library(dplyr)
filtered_tg <- filter(ToothGrowth, dose == 0.5)
View(filtered_tg)
arrage(filtered_tg, len)
arrange(filtered_tg, len)
arrange(filter(ToothGrowth, dose == 0.5), len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose == 0.5) %>%
arrange(len)
install.packages("tidyverse")
library(ggplot2)
library("Tidyverse")
library("tidyverse")
data("diamonds")
View(diamonds)
str(diamonds)
colnames(diamonds)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
names <- c("Andy", "Bobby", "Caris", "David")
age <- c(12, 16, 23, 2)
people <- data.frame(names, age)
head(people)
str(people)
glimpse(people)
glimpse(people)
install.packages("tidyverse")
library(tidyverse)
glimpse(people)
colnames(people)
mutate(people, age_in_20 = age + 20)
```fruits <- c("Apple", 'Beetroot", "Carrot", "Orange", "Grapes")
fruits <- c("Apple", 'Beetroot", "Carrot", "Orange", "Grapes")
fruits <- c ("Apple", 'Beetroot", "Carrot", "Orange", "Grapes")
fruits <- c ("Apple", "Beetroot", "Carrot", "Orange", "Grapes")
personal_rank <- c(1, 2, 5, 4, 3)
fruit_ranks <- data.frame(fruits, personal_rank)
head(fruit_ranks)
glimpse(fruit_ranks)
mutate(fruit_ranks, personal_rank = c(1, 3, 4, 5, 2))
q()
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
library(palmerpenguins)
library(ggplot2)
library(tidyverse)
data("penguins")
View(penguins)
ggplot(data = penguins) + geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g))
ggplot(data=penguins) + geom_point(mapping=aes(x=flipper_length_mm, y=body_mass_g))
library(palmerpenguins)
library(ggplot2)
library(tidyverse)
data("penguins")
View(penguins)
ggplot(data = penguins) + geom_point(mapping = aes(x=flipper_length_mm, y=body_mass_g))
ggplot(data=penguins) + geom_point(mapping=aes(x=flipper_length_mm, y=body_mass_g))
library(palmerpenguins)
library(ggplot2)
library(tidyverse)
library(tidyverse)
library(palmerpenguins)
library(ggplot2)
data(penguins)
View(penguins)
ggplot(data = penguin) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
install.packages("vitae")
library("vitae")
setwd('/Users/qianweisoh/Desktop/Portfolio/Cyclistic Case Study/Analysis with R')
getwd()
list.files(pattern="\\.csv")
setwd('/Users/qianweisoh/Desktop/Portfolio/Cyclistic Case Study/CSV file')
getwd()
list.files(pattern="\\.csv")
View(penguins_raw)
View(penguins)
View(penguins_raw)
View(penguins)
do.call(rbind, lapply(files, read.csv))
combined_data <- do.call(rbind, lapply(files, read.csv))
files <- list.files(pattern = "\\.csv$")
combined_data <- do.call(rbind, lapply(files, read.csv))
combined_data <- do.call(rbind, lapply(files, read.csv))
install.packages("dplyr")
library(dplyr)
#Ensure the required libraries are installed
install.packages(c("dplyr", "ggplot2", "lubridate", "tidyr", "scales"))
#Load the library
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(scales)
file_paths <- list.files(path = "/Users/qianweisoh/Desktop/Portfolio/Cyclistic Case Study/CSV file", full.names = TRUE, pattern = "*.csv")
cyclistic_data <- do.call(rbind, lapply(file_paths, read.csv))
str(cyclistic_data)
head(cyclistic_data)
cyclistic_data <- cyclistic_data %>%
mutate(start_time = as.POSIXct(start_time, format = "%Y-%m-%d %H:%M:%S"),
end_time = as.POSIXct(end_time, format = "%Y-%m-%d %H:%M:%S"))
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(scales)
cyclistic_data <- cyclistic_data %>%
mutate(start_time = as.POSIXct(start_time, format = "%Y-%m-%d %H:%M:%S"),
end_time = as.POSIXct(end_time, format = "%Y-%m-%d %H:%M:%S"))
cyclistic_data <- cyclistic_data %>%
mutate(start_time = as.POSIXct(started_at, format = "%Y-%m-%d %H:%M:%S"),
end_time = as.POSIXct(ended_at, format = "%Y-%m-%d %H:%M:%S"))
cyclistic_data <- cyclistic_data %>%
mutate(ride_length = as.numeric(difftime(end_time, start_time, units = "mins")),
month = month(start_time, label = TRUE, abbr = TRUE),
day_of_week = wday(start_time, label = TRUE, abbr = TRUE))
str(cyclistic_data)
head(cyclistic_data)
cyclistic_data <- cyclistic_data %>%
filter(ride_length > 0)
summary_stats <- cyclistic_data %>%
group_by(member_casual) %>%
summarize(average_ride_length = mean(ride_length),
median_ride_length = median(ride_length),
total_rides = n())
print(summary_stats)
day_of_week_analysis <- cyclistic_data %>%
group_by(member_casual, day_of_week) %>%
summarize(average_ride_length = mean(ride_length),
total_rides = n())
print(day_of_week_analysis)
monthly_analysis <- cyclistic_data %>%
group_by(member_casual, month) %>%
summarize(average_ride_length = mean(ride_length),
total_rides = n())
print(monthly_analysis)
View(combined_data)
View(cyclistic_data)
ggplot(summary_stats, aes(x = member_casual, y = average_ride_length, fill = member_casual)) +
geom_bar(stat = "identity") +
labs(title = "Average Ride Length by User Type", x = "User Type", y = "Average Ride Length (minutes)") +
theme_minimal()
ggsave("average_ride_length.png", plot = last_plot(), width = 8, height = 6)
getwd()
setwd("/Users/qianweisoh/Desktop/Portfolio/Cyclistic Case Study/Analysis with R")
ggplot(day_of_week_analysis, aes(x = day_of_week, y = total_rides, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Rides by Day of Week", x = "Day of Week", y = "Number of Rides") +
theme_minimal()
ggsave("usage_by_day_of_week.png", plot = last_plot(), width = 8, height = 6)
ggplot(monthly_analysis, aes(x = month, y = total_rides, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Rides by Month", x = "Month", y = "Number of Rides") +
theme_minimal()
ggsave("usage_by_Month.png", plot = last_plot(), width = 8, height = 6)
View(summary_stats)
View(monthly_analysis)
write.csv(summary_stats, "summary_statistics.csv", row.names = FALSE)
write.csv(day_of_week_analysis, "day_of_week_analysis.csv", row.names = FALSE)
write.csv(monthly_analysis, "monthly_analysis.csv", row.names = FALSE)
cyclistic_data <- cyclistic_data %>%
mutate(ride_length = as.numeric(difftime(end_time, start_time, units = "mins")),
month = month(start_time, label = TRUE, abbr = TRUE),
day_of_week = wday(start_time, label = TRUE, abbr = TRUE),
hour = hour(start_time, label = TRUE, abbr = TRUE))
str(cyclistic_data)
head(cyclistic_data)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
cyclistic_data <- cyclistic_data %>%
mutate(ride_length = as.numeric(difftime(end_time, start_time, units = "mins")),
month = month(start_time, label = TRUE, abbr = TRUE),
day_of_week = wday(start_time, label = TRUE, abbr = TRUE),
hour = hour(start_time, label = FALSE))
cyclistic_data <- cyclistic_data %>%
mutate(ride_length = as.numeric(difftime(end_time, start_time, units = "mins")),
month = month(start_time, label = TRUE, abbr = TRUE),
day_of_week = wday(start_time, label = TRUE, abbr = TRUE),
hour = hour(start_time))
str(cyclistic_data)
head(cyclistic_data)
hourly_analysis <- cyclistic_data %>%
group_by(member_casual, hour) %>%
summarize(average_ride_length = mean(ride_length),
total_rides = n())
print(hourly_analysis)
write.csv(hourly_analysis, "hourly_analysis.csv", row.names = FALSE)
ggplot(hourly_analysis, aes(x = hour, y = total_rides, fill = member_casual)) +
geom_line(stat = "identity", position = "identity") +
labs(title = "Rides by Hour", x = "Hour", y = "Number of Rides") +
theme_minimal()
ggsave("usage_by_Hour.png", plot = last_plot(), width = 8, height = 6)
write.csv(hourly_analysis, "hourly_analysis.csv", row.names = FALSE)
